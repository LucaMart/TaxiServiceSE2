\section{Entry criteria}
Due to start an integration test two constraints must be satisfied:
the major classes must be covered by ,at least , a 60 percent of unit test, 
while for the others a 30 percent is sufficient.
%TODO spiegare meglio quali siano le classi 'major'
%Ogni classe deve avere una percentuale di unit test del 60% per le classi principali,
%e il 30% per quelle derivate.

\section{Elements to be integrated}
%Ridesmanager: Sharedride, Ride, Controller:{ User, Servornetwrokinterface },
%              Taxiqueue
%Servernetworkinterface: Clientmessage, Servermessage
%Activity: Action:{Clientnetworkinterface},Userinterface,
%           ClientnetworkinterfaceUserinterface, 
%Clientnetworkinterface: Clientmessage, Servermessage

\section{Integration testing strategy}
In this section we will explain how we plan the integration test
in order to build, as soon as possible, a running application 
with few working features; this will allow us to easly show
our progress to the customer, and also , in case of delay, 
to launch a workin
%Unit testing->Top-down
%Integration testing->bottom-up

\section{Sequence of component/Function integration}
%1- Componenti base del server: Ridesmanager, Controller, Guestcontroller
%2- Componenti base del client: Action, LoginAction, Activity, Userinterface
%3- Componenti base networking: Clientnetworkinterface Servernetworkinterface,
%                               Clientmessage, Servermessage
%4- Integrazione server-client
%5- Componenti utente: User, Taxidriver, Passenger, Passengerscontroller
%                      Taxidriverscontroller, Ride
%6- Integrazione utente
%7- Fuznioni avanzate: Sharedride, Reservation
%8- Integrazione funzioni avanzate

\subsection{Software integration sequence}
%punti: 4, 6, 8

\subsection{Subsystem integration sequence}
%punti: 1,2,3,5,7

