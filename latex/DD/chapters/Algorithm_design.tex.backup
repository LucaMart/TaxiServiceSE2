\section{Outsourced algorithms}
% Punti principali:
% non reinventare la ruota
% * usiamo servizi esistenti per il mapping / pathfinding
% --> "vedi Component interfaces"

\section{In-house developed algorithms}
% sviluppati in-house:
% gestione delle *shared ride*
% * assegnamento passeggeri
\subsection{Shared ride}
The following pseudocode describes how share taxi request should be handled
\begin{algorithmic}
 \Function {sharedRequest} {passenger}
  \State $ shared \gets findSharedRideAvailable(fromZone, toZone, timeout) $
  \If {exists shared}
    \State $ shared.addReservation() $
  \Else
    \State $ taxi \gets getAvailableTaxi(fromZone) $
    \If {exists $ taxi $}
      \State create new shared ride
    \Else
      \State error message
    \EndIf
  \EndIf
 \EndFunction
\end{algorithmic}
The following function (dependency of \textit{sharedRequest}), describes how the system should search for an
available shared ride, compatible with the constraints provided via arguments
\begin{algorithmic}
 \Function {findSharedRideAvailable} {fromZone, toZone, timeout}
  \ForAll{ride in Rides}
    \If {ride is shared}
      \If {$ride.fromZone == fromZone$ AND $ride.toZone == toZone$}
	\If {not ride.isFull() AND not ride.isReserved()}
	  \If {$now() - ride.allocationTime < timeout$}
	    \State \Return ride
	  \EndIf
	\EndIf
      \EndIf
    \EndIf
  \EndFor
  \State \Return empty set
 \EndFunction
\end{algorithmic}
The following function (dependency of \textit{sharedRequest}), describes how the system should fetch an available taxi.
Keep in mind that the process of issuing the call to a driver and managing his/her response happens inside this function
(or its sub-routines)
% TODO: specificare come/quando avviene la rimozione dalla coda
\begin{algorithmic}
\Function {getAvailableTaxi} {fromZone}
\ForAll {queue in Queues}
  \If { queue.getZone()==fromZone AND not queue.isEmpty()}
       \State $ taxi \gets queue.getFirstTaxi() $
     \If {taxi.sendRequest()} %TODO: timeout, magari? (non server specificarlo qua, può anche essere implementato dentro a sendRequest())
         \Return taxi
     \Else 
         \State manage queue and retry
    \EndIf
\EndIf
\EndFor
\EndFunction


\end{algorithmic}

% * billing passeggeri (suddivisione dei costi)
%   -> costo per passaggero: funzione della distanza
Billing calculation:
\begin{align*}
 B_{i} &= \text{Amount paid by the i-th passenger} \\
 D_{i} &= \text{Distance traveled by the i-th passenger} \\
 D &= \text{Total traveled distance} \\
 C &= \text{Total amount calculated by the taximeter} \\
 B_{i} &= \frac{D_{i}}{D} * C |_{\substack{\text{rounded to the nearest €0.1 }}} \\
 T &= \sum_{i=0}^{n} B_{i} = \text{Total cost, calculated as the sum of the n partial costs}
\end{align*}


% la gestione delle code è <salvi>banale</salvi>


