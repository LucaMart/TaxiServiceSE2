\section{Overview}
% gps required
The distributed application is composed by a server side, and a client one.
The client side interacts with users ( or guests), showing the correct activity, and send requests to the server sdie, when needed.
The server side manages requests comeing from the client side, and notify the users ( or the guests) involved in the requests. 
\section{High level components and their interaction}
The client side is composed by a set of activi

\section{Component view}
	\subsection{Client}
	  % [client] activity
	  % [client] action
	  % [client] userinterface
	\subsection{Server}
	  % [server] controller
	  % [server] (singleton) ridesmanager
	  % [server] user

\section{Runtime view}
% sequence diagrams
% sequence for: login
% sequence for: registration
% sequence for: taxi request
% sequence for: refused call
% sequence for: update taxi position
% sequence for: shared taxi ride

\section{Component interfaces}
% socket?

\section{Selected architectural styles and patterns}
% client - server
% MVC

\section{Other design decisions}
% hw architecture (see diagram)
% distributed application servers (not in the same physical local network) -> abstraction -> just like big G
% we exclude a priori the possibility of a water-powered machine