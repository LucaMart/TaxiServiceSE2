\section{Overview}
% gps required
%TODO devo essere più preciso nella spiegazione delle funzioni dei vari componenti?
%TODO aggiungere anche il numero di tier e qualcosa di più specifico sulla parte hardware?
The distributed application is composed by a server side, and a client one.
The client side interacts with users ( or guests), showing the correct activity, and send requests to the server side, when needed.
The client side must be able to interact with the GPS,
The server side manages requests coming from the client side, and notifies the users ( or the guests) involved in the requests.
The server side must also interact with a map system, in order to retrieve information about the route and the length of the ride.

\section{High level components and their interaction}
% aggiungere l'UML che ho fatto per il RASD? Sì da bravo
%TODO: fare un parallelo con MVC, per chiarificare le cose <---@luca: <personalmente preferirei anch'io farlo qua, ma essendoci una
								%   sessione dedicata ai pattern usati, forse è meglio inserirlo lì>
The client side is composed by a set of activities composed by one or more actions and displayed through the user interface.
The client side has also an interface which manages the interaction with the server.
The server side has a controller for each connected client, that manages the requests coming from the users ( or guests), 
taking data from the ride manager. It also sends messages to the clients in order to resolve the requests.
The controller interacts with the clients through a network interface.
%TODO: sequence diagram del lato server, che è interessante da mettere
\section{Component view}
	\subsection{Client}
	 \begin{itemize}
	  \item [Activity]: an activity is a set of messages and actions, that the application must display to the users.
	  No more than one activity can be displayed at the same time;
	  The default activity is the "guest home" activity. Each time the user taps a button, the application must execute
	  the related action, and select the next activity.
	  %TODO: paragone con le activity in android
	  \item [Action]: an action is something that a user can do, in order to interact with the application.
	  If an action need some data, the userinterface must display a field, for each input needed, that allows the human
	  to provide the necessary incormations.
	  Some actions can also select the next activity that must be shown, or/and send informations to the server,
	  in order to complete their job.
	  \item [Userinterface]: is the component that directly interact with the human.
	  It contains the activity that must be displayed, and read the components of the activity, in order to display them.
	  It also launch the actions selected by the human.
	  \item[Clientnetworkinterface]: is the component that allow the others to exchange messages with the server side.
	 \end{itemize}
	\subsection{Server}
	\begin{itemize}
	 \item [Controller]: we have one controller for each client connected; initially it will be a guest controller,
	 which allows login/register. After a successful login, the guest controller will create a taxi driver/passenger controller,
	 and substitutes himself with the new controller. The controller must manage requests coming from
	 the client, taking informations from the ridesmanager, and eventually adding new objects to it.
	 In order to sends and receives message from the client, the controller communicates with a Servernetworkinterface.
	 The controller also contains a User object, that allows him to retrieves information about the specific logged user.
	 \item [Ridesmanager]: it is a singleton, that contains informations about the queues, the active rides. This corresponds 
	 to the model in the MVC pattern and it is shared by all the controllers.
	 \item [User]: is the component that contains every possible information about a logged user, taken from the database.
	 User is a part of the controller ( obviously only in case of passenger/taxi driver controller).
	 User is split in taxi driver and passenger, cause there are some differences between the two kind of user.
	 Also user is a part of the model, but it is not shared.
	 \item[Ride]: this class allows to create object, containing all information about a specific ride. 
	 As soon as a passengers make a taxi requests, the controller create a rides containing information recevied from the client.
	 In case of shared ride, a ride object will be created and added to the corresponding sharedride ones.
	 \item[Sharedride]: 
	 \item[Servernetworkinterface]: is the component that allows the interaction with the client side. It converts messages coming from
	 the other server component, in messages readable from the Clientnetwrokinterface, and vice versa.
	\end{itemize}
\section{Runtime view}
% sequence diagrams
% sequence for: login
% sequence for: registration
% sequence for: taxi request
% sequence for: refused call
% sequence for: update taxi position
% sequence for: shared taxi ride <server side>

\section{Component interfaces}
The passenger controller class must interfaces with Google map sevice, using its API, in order to get the shortest path and the 
chilometers of the ride.
% socket?
% io (Il Vate(r)), suggerei di usare JSON per incapsulare i messaggi client-server, dato chè è il metodo più
% semplice e anche popolare per questi usi
\section{Selected architectural styles and patterns}
The application follows the MVC (Model-View-Controller) pattern.
The model is entirely contained in the server side, and it's composed by a singleton class (Ridesmanager), that contains 
informations shared by all the controllers, and a user class (User), that contains informations about a specific user, and is
accessible only by the controller assigned to the corresponding user.
Furthermore, the view is completely contained in the client side; it is composed by the " userinterface" class, that must display
the activity's objects.
The controller is mainly represented by the homonym class, in the server side. There are few controller's functions , that don't 
require data contained in the server, implemented in the action class.

\section{Other design decisions}
The server side structure is composed as shown in the picture below:
%TODO aggiungere lo schema
The load balancer is needed to equally divides requests coming from different clients, in order to increase performances.
Different application servers must be placed in different physical zones, in order to react to possibly partial blackout and other
local physical accidents.
Client side there's only one constraint, the obbligation, for the taxi driver, to use a divece with a working GPS.
% hw architecture (see diagram)
% distributed application servers (not in the same physical local network) -> abstraction -> just like big G
% we exclude a priori the possibility of a water-powered machine